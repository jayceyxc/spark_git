package com.linus.dataalgorithms.mapreduce.order_inversion;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;
import org.apache.log4j.Logger;

public class RelativeFrequencyDriver extends Configured implements Tool {
    private static Logger theLogger = Logger.getLogger (RelativeFrequencyDriver.class);

    @Override
    public int run (String[] args) throws Exception {
        int neighborWindow = Integer.parseInt(args[0]);
        Path inputPath = new Path(args[1]);
        Path outputPath = new Path(args[2]);

        Configuration conf = getConf ();
        Job job = new Job (conf);
        job.setJarByClass (RelativeFrequencyDriver.class);
        job.setJobName("RelativeFrequencyDriver");

        // Delete the output directory if it exists already
        FileSystem.get(getConf()).delete(outputPath, true);

        job.getConfiguration().setInt("neighbor.window", neighborWindow);

        FileInputFormat.setInputPaths (job, inputPath);
        FileOutputFormat.setOutputPath (job, outputPath);

        // (key,value) generated by map()
        job.setMapOutputValueClass (PairOfWords.class);
        job.setMapOutputValueClass (IntWritable.class);

        // (key,value) generated by reduce()
        job.setOutputKeyClass (PairOfWords.class);
        job.setOutputValueClass (DoubleWritable.class);

        job.setMapperClass (RelativeFrequencyMapper.class);
        job.setReducerClass (RelativeFrequencyReducer.class);
        job.setCombinerClass (RelativeFrequencyCombiner.class);
        job.setPartitionerClass (OrderInversionPartitioner.class);

        job.setNumReduceTasks (3);

        long statTime = System.currentTimeMillis ();

        boolean status = job.waitForCompletion (true);
        theLogger.info ("run(): status=" + status);
        theLogger.info ("Job Finished in milliseconds: + " + (System.currentTimeMillis () - statTime));
        return status ? 0 : 1;
    }

    /**
     * The main driver for word count map/reduce program.
     * Invoke this method to submit the map/reduce job.
     * @throws Exception When there is communication problems with the job tracker.
     */
    public static int submitJob(String[] args) throws Exception {
        //String[] args = new String[2];
        //args[0] = inputDir;
        //args[1] = outputDir;
        int returnStatus = ToolRunner.run(new RelativeFrequencyDriver (), args);
        return returnStatus;
    }

    /**
     * The main driver for word count map/reduce program.
     * Invoke this method to submit the map/reduce job.
     * @throws Exception When there is communication problems with the job tracker.
     */
    public static void main (String[] args) throws Exception {
        // Make sure there are exactly 2 parameters
        if (args.length != 2) {
            theLogger.warn("SecondarySortDriver <input-dir> <output-dir>");
            throw new IllegalArgumentException("SecondarySortDriver <input-dir> <output-dir>");
        }

        int returnStatus = submitJob (args);
        theLogger.info("returnStatus="+returnStatus);

        System.exit (returnStatus);
    }
}
